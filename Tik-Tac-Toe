{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "029b3d8a-95e6-4ceb-8419-38b2fd7a34be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " -------------\n",
      "|   |   |   |\n",
      " -------------\n",
      "|   |   |   |\n",
      " -------------\n",
      "|   |   |   |\n",
      " -------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Player X, enter your move (1-9):  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " -------------\n",
      "|   |   | X |\n",
      " -------------\n",
      "|   |   |   |\n",
      " -------------\n",
      "|   |   |   |\n",
      " -------------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Player O, enter your move (1-9):  5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " -------------\n",
      "|   |   | X |\n",
      " -------------\n",
      "|   | O |   |\n",
      " -------------\n",
      "|   |   |   |\n",
      " -------------\n"
     ]
    }
   ],
   "source": [
    "# Tic-Tac-Toe Game in Python\n",
    "\n",
    "# Function to print the Tic-Tac-Toe board\n",
    "def print_board(board):\n",
    "    print(\" -------------\")\n",
    "    for row in board:\n",
    "        print(\"|\", \" | \".join(row), \"|\")\n",
    "        print(\" -------------\")\n",
    "\n",
    "# Function to check if the player has won\n",
    "def check_winner(board, player):\n",
    "    # Check rows, columns, and diagonals\n",
    "    for row in board:\n",
    "        if all([cell == player for cell in row]):\n",
    "            return True\n",
    "    for col in range(3):\n",
    "        if all([board[row][col] == player for row in range(3)]):\n",
    "            return True\n",
    "    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):\n",
    "        return True\n",
    "    return False\n",
    "\n",
    "# Function to check if the board is full (tie game)\n",
    "def check_tie(board):\n",
    "    return all([cell != \" \" for row in board for cell in row])\n",
    "\n",
    "# Function to handle player move\n",
    "def player_move(board, player):\n",
    "    while True:\n",
    "        try:\n",
    "            move = int(input(f\"Player {player}, enter your move (1-9): \"))\n",
    "            if move < 1 or move > 9:\n",
    "                raise ValueError\n",
    "            row, col = divmod(move - 1, 3)\n",
    "            if board[row][col] == \" \":\n",
    "                board[row][col] = player\n",
    "                break\n",
    "            else:\n",
    "                print(\"The spot is already taken. Try again.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number between 1 and 9.\")\n",
    "\n",
    "# Main function to play the game\n",
    "def play_game():\n",
    "    board = [[\" \" for _ in range(3)] for _ in range(3)]\n",
    "    current_player = \"X\"\n",
    "    \n",
    "    while True:\n",
    "        print_board(board)\n",
    "        player_move(board, current_player)\n",
    "        \n",
    "        if check_winner(board, current_player):\n",
    "            print_board(board)\n",
    "            print(f\"Congratulations! Player {current_player} wins!\")\n",
    "            break\n",
    "        \n",
    "        if check_tie(board):\n",
    "            print_board(board)\n",
    "            print(\"It's a tie!\")\n",
    "            break\n",
    "        \n",
    "        current_player = \"O\" if current_player == \"X\" else \"X\"\n",
    "\n",
    "# Run the game\n",
    "if __name__ == \"__main__\":\n",
    "    play_game()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c821e0d6-97be-4470-abd8-628c794af4ad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
